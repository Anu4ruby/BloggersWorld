{"ts":1370882796344,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Use this hook to configure devise mailer, warden hooks and so forth. The first\n# four configuration values can also be set straight in your models.\nDevise.setup do |config|\n  # Configure the e-mail address which will be shown in DeviseMailer.\n  config.mailer_sender = \"please-change-me@config-initializers-devise.com\"\n\n  # ==> Configuration for any authentication mechanism\n  # Configure which keys are used when authenticating an user. By default is\n  # just :email. You can configure it to use [:username, :subdomain], so for\n  # authenticating an user, both parameters are required. Remember that those\n  # parameters are used only when authenticating and not when retrieving from\n  # session. If you need permissions, you should implement that in a before filter.\n  # config.authentication_keys = [ :email ]\n\n  # Tell if authentication through request.params is enabled. True by default.\n  # config.params_authenticatable = true\n\n  # Tell if authentication through HTTP Basic Auth is enabled. True by default.\n  # config.http_authenticatable = true\n\n  # The realm used in Http Basic Authentication\n  # config.http_authentication_realm = \"Application\"\n\n  # ==> Configuration for :database_authenticatable\n  # Invoke `rake secret` and use the printed value to setup a pepper to generate\n  # the encrypted password. By default no pepper is used.\n  # config.pepper = \"rake secret output\"\n\n  # Configure how many times you want the password is reencrypted. Default is 10.\n  # config.stretches = 10\n\n  # Define which will be the encryption algorithm. Supported algorithms are :sha1\n  # (default), :sha512 and :bcrypt. Devise also supports encryptors from others\n  # authentication tools as :clearance_sha1, :authlogic_sha512 (then you should set\n  # stretches above to 20 for default behavior) and :restful_authentication_sha1\n  # (then you should set stretches to 10, and copy REST_AUTH_SITE_KEY to pepper)\n  # config.encryptor = :sha1\n\n  # ==> Configuration for :confirmable\n  # The time you want give to your user to confirm his account. During this time\n  # he will be able to access your application without confirming. Default is nil.\n  # config.confirm_within = 2.days\n\n  # ==> Configuration for :rememberable\n  # The time the user will be remembered without asking for credentials again.\n  # config.remember_for = 2.weeks\n\n  # ==> Configuration for :validatable\n  # Range for password length\n  # config.password_length = 6..20\n\n  # Regex to use to validate the email address\n  # config.email_regexp = /^([\\w\\.%\\+\\-]+)@([\\w\\-]+\\.)+([\\w]{2,})$/i\n\n  # ==> Configuration for :timeoutable\n  # The time you want to timeout the user session without activity. After this\n  # time the user will be asked for credentials again.\n  # config.timeout_in = 10.minutes\n\n  # ==> Configuration for :lockable\n  # Defines which strategy will be used to lock an account.\n  # :failed_attempts = Locks an account after a number of failed attempts to sign in.\n  # :none            = No lock strategy. You should handle locking by yourself.\n  # config.lock_strategy = :failed_attempts\n\n  # Defines which strategy will be used to unlock an account.\n  # :email = Sends an unlock link to the user email\n  # :time  = Reanables login after a certain ammount of time (see :unlock_in below)\n  # :both  = Enables both strategies\n  # :none  = No unlock strategy. You should handle unlocking by yourself.\n  # config.unlock_strategy = :both\n\n  # Number of authentication tries before locking an account if lock_strategy\n  # is failed attempts.\n  # config.maximum_attempts = 20\n\n  # Time interval to unlock the account if :time is enabled as unlock_strategy.\n  # config.unlock_in = 1.hour\n\n  # ==> Configuration for :token_authenticatable\n  # Defines name of the authentication token params key\n  # config.token_authentication_key = :auth_token\n\n  # ==> General configuration\n  # Load and configure the ORM. Supports :active_record (default), :mongoid\n  # (requires mongo_ext installed) and :data_mapper (experimental).\n  require 'devise/orm/active_record'\n\n  # Turn scoped views on. Before rendering \"sessions/new\", it will first check for\n  # \"sessions/users/new\". It's turned off by default because it's slower if you\n  # are using only default views.\n  # config.scoped_views = true\n\n  # By default, devise detects the role accessed based on the url. So whenever\n  # accessing \"/users/sign_in\", it knows you are accessing an User. This makes\n  # routes as \"/sign_in\" not possible, unless you tell Devise to use the default\n  # scope, setting true below.\n  # config.use_default_scope = true\n\n  # Configure the default scope used by Devise. By default it's the first devise\n  # role declared in your routes.\n  # config.default_scope = :user\n\n  # If you want to use other strategies, that are not (yet) supported by Devise,\n  # you can configure them inside the config.warden block. The example below\n  # allows you to setup OAuth, using http://github.com/roman/warden_oauth\n  #\n  # config.warden do |manager|\n  #   manager.oauth(:twitter) do |twitter|\n  #     twitter.consumer_secret = <YOUR CONSUMER SECRET>\n  #     twitter.consumer_key  = <YOUR CONSUMER KEY>\n  #     twitter.options :site => 'http://twitter.com'\n  #   end\n  #   manager.default_strategies(:scope => :user).unshift :twitter_oauth\n  # end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":5282}]],"length":5282}
{"contributors":[],"silentsave":false,"ts":1370891351907,"patch":[[{"diffs":[[0,"Mailer.\n"],[1,"  \n  config.authentication_keys = [ :username ]\n  config.password_length = 4..20\n"],[0,"  config"]],"start1":237,"start2":237,"length1":16,"length2":97}]],"length":5363,"saved":false}
